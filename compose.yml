services:
  # front:
  #   image: example/webapp
  #   ports:
  #     - "443:8043"
  #   networks:
  #     - front
  #     - server
  #   configs:
  #     - httpd-config
  #   secrets:
  #     - server-certificate

  server:
    depends_on:
      database:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./docker/server/Dockerfile
    environment:
      PORT: 5001
      DB_HOST: database
      DB_PORT: 3306
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_NAME: ${DB_NAME}
      NODE_ENV: ${NODE_ENV}
    ports:
      # Firebase Functions emulator
      - "${PORT:-5001}:5001"
      # Firebase Emulator Suite UI
      - "4000:4000"
      # Firebase Auth emulator
      - "9099:9099"
      # Firebase Firestore emulator
      - "8080:8080"
      # Firebase Realtime Database emulator
      - "9000:9000"
      # Firebase Storage emulator
      - "9199:9199"
      # Firebase Hosting emulator
      - "5000:5000"
      # Firebase Pub/Sub emulator
      - "8085:8085"
    volumes:
      - ./server/node_modules:/usr/app/node_modules
      - ./firebase-service-account.json:/usr/app/firebase-service-account.json:ro
    networks:
      - server

  database:
    build:
      context: ./
      dockerfile: ./docker/database/Dockerfile
    env_file:
      - server/.env.local
    ports:
      - "${DB_PORT:-3306}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - server
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-P",
          "${DB_PORT:-3306}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  # The presence of these objects is sufficient to define them
  front: {}
  server: {}
